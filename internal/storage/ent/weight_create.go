// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devldavydov/myfood/internal/storage/ent/weight"
)

// WeightCreate is the builder for creating a Weight entity.
type WeightCreate struct {
	config
	mutation *WeightMutation
	hooks    []Hook
}

// SetUserid sets the "userid" field.
func (wc *WeightCreate) SetUserid(i int64) *WeightCreate {
	wc.mutation.SetUserid(i)
	return wc
}

// SetTimestamp sets the "timestamp" field.
func (wc *WeightCreate) SetTimestamp(t time.Time) *WeightCreate {
	wc.mutation.SetTimestamp(t)
	return wc
}

// SetValue sets the "value" field.
func (wc *WeightCreate) SetValue(f float64) *WeightCreate {
	wc.mutation.SetValue(f)
	return wc
}

// Mutation returns the WeightMutation object of the builder.
func (wc *WeightCreate) Mutation() *WeightMutation {
	return wc.mutation
}

// Save creates the Weight in the database.
func (wc *WeightCreate) Save(ctx context.Context) (*Weight, error) {
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WeightCreate) SaveX(ctx context.Context) *Weight {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WeightCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WeightCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WeightCreate) check() error {
	if _, ok := wc.mutation.Userid(); !ok {
		return &ValidationError{Name: "userid", err: errors.New(`ent: missing required field "Weight.userid"`)}
	}
	if _, ok := wc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Weight.timestamp"`)}
	}
	if _, ok := wc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Weight.value"`)}
	}
	return nil
}

func (wc *WeightCreate) sqlSave(ctx context.Context) (*Weight, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WeightCreate) createSpec() (*Weight, *sqlgraph.CreateSpec) {
	var (
		_node = &Weight{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(weight.Table, sqlgraph.NewFieldSpec(weight.FieldID, field.TypeInt))
	)
	if value, ok := wc.mutation.Userid(); ok {
		_spec.SetField(weight.FieldUserid, field.TypeInt64, value)
		_node.Userid = value
	}
	if value, ok := wc.mutation.Timestamp(); ok {
		_spec.SetField(weight.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := wc.mutation.Value(); ok {
		_spec.SetField(weight.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	return _node, _spec
}

// WeightCreateBulk is the builder for creating many Weight entities in bulk.
type WeightCreateBulk struct {
	config
	err      error
	builders []*WeightCreate
}

// Save creates the Weight entities in the database.
func (wcb *WeightCreateBulk) Save(ctx context.Context) ([]*Weight, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Weight, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WeightCreateBulk) SaveX(ctx context.Context) []*Weight {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WeightCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WeightCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
