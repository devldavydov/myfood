// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/devldavydov/myfood/internal/storage/ent/weight"
)

// Weight is the model entity for the Weight schema.
type Weight struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Userid holds the value of the "userid" field.
	Userid int64 `json:"userid,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Value holds the value of the "value" field.
	Value        float64 `json:"value,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Weight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weight.FieldValue:
			values[i] = new(sql.NullFloat64)
		case weight.FieldID, weight.FieldUserid:
			values[i] = new(sql.NullInt64)
		case weight.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Weight fields.
func (w *Weight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weight.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case weight.FieldUserid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userid", values[i])
			} else if value.Valid {
				w.Userid = value.Int64
			}
		case weight.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				w.Timestamp = value.Time
			}
		case weight.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				w.Value = value.Float64
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Weight.
// This includes values selected through modifiers, order, etc.
func (w *Weight) GetValue(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// Update returns a builder for updating this Weight.
// Note that you need to call Weight.Unwrap() before calling this method if this Weight
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Weight) Update() *WeightUpdateOne {
	return NewWeightClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Weight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Weight) Unwrap() *Weight {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Weight is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Weight) String() string {
	var builder strings.Builder
	builder.WriteString("Weight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("userid=")
	builder.WriteString(fmt.Sprintf("%v", w.Userid))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(w.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", w.Value))
	builder.WriteByte(')')
	return builder.String()
}

// Weights is a parsable slice of Weight.
type Weights []*Weight
