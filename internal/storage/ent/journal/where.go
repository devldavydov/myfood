// Code generated by ent, DO NOT EDIT.

package journal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/devldavydov/myfood/internal/storage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Journal {
	return predicate.Journal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Journal {
	return predicate.Journal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Journal {
	return predicate.Journal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Journal {
	return predicate.Journal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Journal {
	return predicate.Journal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Journal {
	return predicate.Journal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Journal {
	return predicate.Journal(sql.FieldLTE(FieldID, id))
}

// Userid applies equality check predicate on the "userid" field. It's identical to UseridEQ.
func Userid(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldUserid, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldTimestamp, v))
}

// Meal applies equality check predicate on the "meal" field. It's identical to MealEQ.
func Meal(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldMeal, v))
}

// Foodweight applies equality check predicate on the "foodweight" field. It's identical to FoodweightEQ.
func Foodweight(v float64) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldFoodweight, v))
}

// UseridEQ applies the EQ predicate on the "userid" field.
func UseridEQ(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldUserid, v))
}

// UseridNEQ applies the NEQ predicate on the "userid" field.
func UseridNEQ(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldNEQ(FieldUserid, v))
}

// UseridIn applies the In predicate on the "userid" field.
func UseridIn(vs ...int64) predicate.Journal {
	return predicate.Journal(sql.FieldIn(FieldUserid, vs...))
}

// UseridNotIn applies the NotIn predicate on the "userid" field.
func UseridNotIn(vs ...int64) predicate.Journal {
	return predicate.Journal(sql.FieldNotIn(FieldUserid, vs...))
}

// UseridGT applies the GT predicate on the "userid" field.
func UseridGT(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldGT(FieldUserid, v))
}

// UseridGTE applies the GTE predicate on the "userid" field.
func UseridGTE(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldGTE(FieldUserid, v))
}

// UseridLT applies the LT predicate on the "userid" field.
func UseridLT(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldLT(FieldUserid, v))
}

// UseridLTE applies the LTE predicate on the "userid" field.
func UseridLTE(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldLTE(FieldUserid, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Journal {
	return predicate.Journal(sql.FieldLTE(FieldTimestamp, v))
}

// MealEQ applies the EQ predicate on the "meal" field.
func MealEQ(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldMeal, v))
}

// MealNEQ applies the NEQ predicate on the "meal" field.
func MealNEQ(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldNEQ(FieldMeal, v))
}

// MealIn applies the In predicate on the "meal" field.
func MealIn(vs ...int64) predicate.Journal {
	return predicate.Journal(sql.FieldIn(FieldMeal, vs...))
}

// MealNotIn applies the NotIn predicate on the "meal" field.
func MealNotIn(vs ...int64) predicate.Journal {
	return predicate.Journal(sql.FieldNotIn(FieldMeal, vs...))
}

// MealGT applies the GT predicate on the "meal" field.
func MealGT(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldGT(FieldMeal, v))
}

// MealGTE applies the GTE predicate on the "meal" field.
func MealGTE(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldGTE(FieldMeal, v))
}

// MealLT applies the LT predicate on the "meal" field.
func MealLT(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldLT(FieldMeal, v))
}

// MealLTE applies the LTE predicate on the "meal" field.
func MealLTE(v int64) predicate.Journal {
	return predicate.Journal(sql.FieldLTE(FieldMeal, v))
}

// FoodweightEQ applies the EQ predicate on the "foodweight" field.
func FoodweightEQ(v float64) predicate.Journal {
	return predicate.Journal(sql.FieldEQ(FieldFoodweight, v))
}

// FoodweightNEQ applies the NEQ predicate on the "foodweight" field.
func FoodweightNEQ(v float64) predicate.Journal {
	return predicate.Journal(sql.FieldNEQ(FieldFoodweight, v))
}

// FoodweightIn applies the In predicate on the "foodweight" field.
func FoodweightIn(vs ...float64) predicate.Journal {
	return predicate.Journal(sql.FieldIn(FieldFoodweight, vs...))
}

// FoodweightNotIn applies the NotIn predicate on the "foodweight" field.
func FoodweightNotIn(vs ...float64) predicate.Journal {
	return predicate.Journal(sql.FieldNotIn(FieldFoodweight, vs...))
}

// FoodweightGT applies the GT predicate on the "foodweight" field.
func FoodweightGT(v float64) predicate.Journal {
	return predicate.Journal(sql.FieldGT(FieldFoodweight, v))
}

// FoodweightGTE applies the GTE predicate on the "foodweight" field.
func FoodweightGTE(v float64) predicate.Journal {
	return predicate.Journal(sql.FieldGTE(FieldFoodweight, v))
}

// FoodweightLT applies the LT predicate on the "foodweight" field.
func FoodweightLT(v float64) predicate.Journal {
	return predicate.Journal(sql.FieldLT(FieldFoodweight, v))
}

// FoodweightLTE applies the LTE predicate on the "foodweight" field.
func FoodweightLTE(v float64) predicate.Journal {
	return predicate.Journal(sql.FieldLTE(FieldFoodweight, v))
}

// HasFood applies the HasEdge predicate on the "food" edge.
func HasFood() predicate.Journal {
	return predicate.Journal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FoodTable, FoodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFoodWith applies the HasEdge predicate on the "food" edge with a given conditions (other predicates).
func HasFoodWith(preds ...predicate.Food) predicate.Journal {
	return predicate.Journal(func(s *sql.Selector) {
		step := newFoodStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Journal) predicate.Journal {
	return predicate.Journal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Journal) predicate.Journal {
	return predicate.Journal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Journal) predicate.Journal {
	return predicate.Journal(sql.NotPredicates(p))
}
