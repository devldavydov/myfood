// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devldavydov/myfood/internal/storage/ent/bundle"
)

// BundleCreate is the builder for creating a Bundle entity.
type BundleCreate struct {
	config
	mutation *BundleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserid sets the "userid" field.
func (bc *BundleCreate) SetUserid(i int64) *BundleCreate {
	bc.mutation.SetUserid(i)
	return bc
}

// SetKey sets the "key" field.
func (bc *BundleCreate) SetKey(s string) *BundleCreate {
	bc.mutation.SetKey(s)
	return bc
}

// SetData sets the "data" field.
func (bc *BundleCreate) SetData(m map[string]float64) *BundleCreate {
	bc.mutation.SetData(m)
	return bc
}

// Mutation returns the BundleMutation object of the builder.
func (bc *BundleCreate) Mutation() *BundleMutation {
	return bc.mutation
}

// Save creates the Bundle in the database.
func (bc *BundleCreate) Save(ctx context.Context) (*Bundle, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BundleCreate) SaveX(ctx context.Context) *Bundle {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BundleCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BundleCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BundleCreate) check() error {
	if _, ok := bc.mutation.Userid(); !ok {
		return &ValidationError{Name: "userid", err: errors.New(`ent: missing required field "Bundle.userid"`)}
	}
	if _, ok := bc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Bundle.key"`)}
	}
	if _, ok := bc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "Bundle.data"`)}
	}
	return nil
}

func (bc *BundleCreate) sqlSave(ctx context.Context) (*Bundle, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BundleCreate) createSpec() (*Bundle, *sqlgraph.CreateSpec) {
	var (
		_node = &Bundle{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bundle.Table, sqlgraph.NewFieldSpec(bundle.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.Userid(); ok {
		_spec.SetField(bundle.FieldUserid, field.TypeInt64, value)
		_node.Userid = value
	}
	if value, ok := bc.mutation.Key(); ok {
		_spec.SetField(bundle.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := bc.mutation.Data(); ok {
		_spec.SetField(bundle.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bundle.Create().
//		SetUserid(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BundleUpsert) {
//			SetUserid(v+v).
//		}).
//		Exec(ctx)
func (bc *BundleCreate) OnConflict(opts ...sql.ConflictOption) *BundleUpsertOne {
	bc.conflict = opts
	return &BundleUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BundleCreate) OnConflictColumns(columns ...string) *BundleUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BundleUpsertOne{
		create: bc,
	}
}

type (
	// BundleUpsertOne is the builder for "upsert"-ing
	//  one Bundle node.
	BundleUpsertOne struct {
		create *BundleCreate
	}

	// BundleUpsert is the "OnConflict" setter.
	BundleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserid sets the "userid" field.
func (u *BundleUpsert) SetUserid(v int64) *BundleUpsert {
	u.Set(bundle.FieldUserid, v)
	return u
}

// UpdateUserid sets the "userid" field to the value that was provided on create.
func (u *BundleUpsert) UpdateUserid() *BundleUpsert {
	u.SetExcluded(bundle.FieldUserid)
	return u
}

// AddUserid adds v to the "userid" field.
func (u *BundleUpsert) AddUserid(v int64) *BundleUpsert {
	u.Add(bundle.FieldUserid, v)
	return u
}

// SetKey sets the "key" field.
func (u *BundleUpsert) SetKey(v string) *BundleUpsert {
	u.Set(bundle.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *BundleUpsert) UpdateKey() *BundleUpsert {
	u.SetExcluded(bundle.FieldKey)
	return u
}

// SetData sets the "data" field.
func (u *BundleUpsert) SetData(v map[string]float64) *BundleUpsert {
	u.Set(bundle.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *BundleUpsert) UpdateData() *BundleUpsert {
	u.SetExcluded(bundle.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BundleUpsertOne) UpdateNewValues() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BundleUpsertOne) Ignore() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BundleUpsertOne) DoNothing() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BundleCreate.OnConflict
// documentation for more info.
func (u *BundleUpsertOne) Update(set func(*BundleUpsert)) *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BundleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserid sets the "userid" field.
func (u *BundleUpsertOne) SetUserid(v int64) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetUserid(v)
	})
}

// AddUserid adds v to the "userid" field.
func (u *BundleUpsertOne) AddUserid(v int64) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.AddUserid(v)
	})
}

// UpdateUserid sets the "userid" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdateUserid() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateUserid()
	})
}

// SetKey sets the "key" field.
func (u *BundleUpsertOne) SetKey(v string) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdateKey() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateKey()
	})
}

// SetData sets the "data" field.
func (u *BundleUpsertOne) SetData(v map[string]float64) *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *BundleUpsertOne) UpdateData() *BundleUpsertOne {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *BundleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BundleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BundleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BundleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BundleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BundleCreateBulk is the builder for creating many Bundle entities in bulk.
type BundleCreateBulk struct {
	config
	err      error
	builders []*BundleCreate
	conflict []sql.ConflictOption
}

// Save creates the Bundle entities in the database.
func (bcb *BundleCreateBulk) Save(ctx context.Context) ([]*Bundle, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bundle, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BundleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BundleCreateBulk) SaveX(ctx context.Context) []*Bundle {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BundleCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BundleCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bundle.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BundleUpsert) {
//			SetUserid(v+v).
//		}).
//		Exec(ctx)
func (bcb *BundleCreateBulk) OnConflict(opts ...sql.ConflictOption) *BundleUpsertBulk {
	bcb.conflict = opts
	return &BundleUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BundleCreateBulk) OnConflictColumns(columns ...string) *BundleUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BundleUpsertBulk{
		create: bcb,
	}
}

// BundleUpsertBulk is the builder for "upsert"-ing
// a bulk of Bundle nodes.
type BundleUpsertBulk struct {
	create *BundleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BundleUpsertBulk) UpdateNewValues() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BundleUpsertBulk) Ignore() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BundleUpsertBulk) DoNothing() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BundleCreateBulk.OnConflict
// documentation for more info.
func (u *BundleUpsertBulk) Update(set func(*BundleUpsert)) *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BundleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserid sets the "userid" field.
func (u *BundleUpsertBulk) SetUserid(v int64) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetUserid(v)
	})
}

// AddUserid adds v to the "userid" field.
func (u *BundleUpsertBulk) AddUserid(v int64) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.AddUserid(v)
	})
}

// UpdateUserid sets the "userid" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdateUserid() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateUserid()
	})
}

// SetKey sets the "key" field.
func (u *BundleUpsertBulk) SetKey(v string) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdateKey() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateKey()
	})
}

// SetData sets the "data" field.
func (u *BundleUpsertBulk) SetData(v map[string]float64) *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *BundleUpsertBulk) UpdateData() *BundleUpsertBulk {
	return u.Update(func(s *BundleUpsert) {
		s.UpdateData()
	})
}

// Exec executes the query.
func (u *BundleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BundleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BundleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BundleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
