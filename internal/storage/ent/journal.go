// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/devldavydov/myfood/internal/storage/ent/food"
	"github.com/devldavydov/myfood/internal/storage/ent/journal"
)

// Journal is the model entity for the Journal schema.
type Journal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Userid holds the value of the "userid" field.
	Userid int64 `json:"userid,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Meal holds the value of the "meal" field.
	Meal int64 `json:"meal,omitempty"`
	// Foodweight holds the value of the "foodweight" field.
	Foodweight float64 `json:"foodweight,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JournalQuery when eager-loading is set.
	Edges         JournalEdges `json:"edges"`
	food_journals *int
	selectValues  sql.SelectValues
}

// JournalEdges holds the relations/edges for other nodes in the graph.
type JournalEdges struct {
	// Food holds the value of the food edge.
	Food *Food `json:"food,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FoodOrErr returns the Food value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JournalEdges) FoodOrErr() (*Food, error) {
	if e.Food != nil {
		return e.Food, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: food.Label}
	}
	return nil, &NotLoadedError{edge: "food"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Journal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case journal.FieldFoodweight:
			values[i] = new(sql.NullFloat64)
		case journal.FieldID, journal.FieldUserid, journal.FieldMeal:
			values[i] = new(sql.NullInt64)
		case journal.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case journal.ForeignKeys[0]: // food_journals
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Journal fields.
func (j *Journal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case journal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case journal.FieldUserid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userid", values[i])
			} else if value.Valid {
				j.Userid = value.Int64
			}
		case journal.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				j.Timestamp = value.Time
			}
		case journal.FieldMeal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field meal", values[i])
			} else if value.Valid {
				j.Meal = value.Int64
			}
		case journal.FieldFoodweight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field foodweight", values[i])
			} else if value.Valid {
				j.Foodweight = value.Float64
			}
		case journal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field food_journals", value)
			} else if value.Valid {
				j.food_journals = new(int)
				*j.food_journals = int(value.Int64)
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Journal.
// This includes values selected through modifiers, order, etc.
func (j *Journal) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// QueryFood queries the "food" edge of the Journal entity.
func (j *Journal) QueryFood() *FoodQuery {
	return NewJournalClient(j.config).QueryFood(j)
}

// Update returns a builder for updating this Journal.
// Note that you need to call Journal.Unwrap() before calling this method if this Journal
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Journal) Update() *JournalUpdateOne {
	return NewJournalClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Journal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Journal) Unwrap() *Journal {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Journal is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Journal) String() string {
	var builder strings.Builder
	builder.WriteString("Journal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("userid=")
	builder.WriteString(fmt.Sprintf("%v", j.Userid))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(j.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("meal=")
	builder.WriteString(fmt.Sprintf("%v", j.Meal))
	builder.WriteString(", ")
	builder.WriteString("foodweight=")
	builder.WriteString(fmt.Sprintf("%v", j.Foodweight))
	builder.WriteByte(')')
	return builder.String()
}

// Journals is a parsable slice of Journal.
type Journals []*Journal
