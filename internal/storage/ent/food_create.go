// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devldavydov/myfood/internal/storage/ent/food"
	"github.com/devldavydov/myfood/internal/storage/ent/journal"
)

// FoodCreate is the builder for creating a Food entity.
type FoodCreate struct {
	config
	mutation *FoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (fc *FoodCreate) SetKey(s string) *FoodCreate {
	fc.mutation.SetKey(s)
	return fc
}

// SetName sets the "name" field.
func (fc *FoodCreate) SetName(s string) *FoodCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetBrand sets the "brand" field.
func (fc *FoodCreate) SetBrand(s string) *FoodCreate {
	fc.mutation.SetBrand(s)
	return fc
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (fc *FoodCreate) SetNillableBrand(s *string) *FoodCreate {
	if s != nil {
		fc.SetBrand(*s)
	}
	return fc
}

// SetCal100 sets the "cal100" field.
func (fc *FoodCreate) SetCal100(f float64) *FoodCreate {
	fc.mutation.SetCal100(f)
	return fc
}

// SetProt100 sets the "prot100" field.
func (fc *FoodCreate) SetProt100(f float64) *FoodCreate {
	fc.mutation.SetProt100(f)
	return fc
}

// SetFat100 sets the "fat100" field.
func (fc *FoodCreate) SetFat100(f float64) *FoodCreate {
	fc.mutation.SetFat100(f)
	return fc
}

// SetCarb100 sets the "carb100" field.
func (fc *FoodCreate) SetCarb100(f float64) *FoodCreate {
	fc.mutation.SetCarb100(f)
	return fc
}

// SetComment sets the "comment" field.
func (fc *FoodCreate) SetComment(s string) *FoodCreate {
	fc.mutation.SetComment(s)
	return fc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (fc *FoodCreate) SetNillableComment(s *string) *FoodCreate {
	if s != nil {
		fc.SetComment(*s)
	}
	return fc
}

// AddJournalIDs adds the "journals" edge to the Journal entity by IDs.
func (fc *FoodCreate) AddJournalIDs(ids ...int) *FoodCreate {
	fc.mutation.AddJournalIDs(ids...)
	return fc
}

// AddJournals adds the "journals" edges to the Journal entity.
func (fc *FoodCreate) AddJournals(j ...*Journal) *FoodCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return fc.AddJournalIDs(ids...)
}

// Mutation returns the FoodMutation object of the builder.
func (fc *FoodCreate) Mutation() *FoodMutation {
	return fc.mutation
}

// Save creates the Food in the database.
func (fc *FoodCreate) Save(ctx context.Context) (*Food, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FoodCreate) SaveX(ctx context.Context) *Food {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FoodCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FoodCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FoodCreate) check() error {
	if _, ok := fc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Food.key"`)}
	}
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Food.name"`)}
	}
	if v, ok := fc.mutation.Name(); ok {
		if err := food.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Food.name": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Cal100(); !ok {
		return &ValidationError{Name: "cal100", err: errors.New(`ent: missing required field "Food.cal100"`)}
	}
	if _, ok := fc.mutation.Prot100(); !ok {
		return &ValidationError{Name: "prot100", err: errors.New(`ent: missing required field "Food.prot100"`)}
	}
	if _, ok := fc.mutation.Fat100(); !ok {
		return &ValidationError{Name: "fat100", err: errors.New(`ent: missing required field "Food.fat100"`)}
	}
	if _, ok := fc.mutation.Carb100(); !ok {
		return &ValidationError{Name: "carb100", err: errors.New(`ent: missing required field "Food.carb100"`)}
	}
	return nil
}

func (fc *FoodCreate) sqlSave(ctx context.Context) (*Food, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FoodCreate) createSpec() (*Food, *sqlgraph.CreateSpec) {
	var (
		_node = &Food{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(food.Table, sqlgraph.NewFieldSpec(food.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.Key(); ok {
		_spec.SetField(food.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(food.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Brand(); ok {
		_spec.SetField(food.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := fc.mutation.Cal100(); ok {
		_spec.SetField(food.FieldCal100, field.TypeFloat64, value)
		_node.Cal100 = value
	}
	if value, ok := fc.mutation.Prot100(); ok {
		_spec.SetField(food.FieldProt100, field.TypeFloat64, value)
		_node.Prot100 = value
	}
	if value, ok := fc.mutation.Fat100(); ok {
		_spec.SetField(food.FieldFat100, field.TypeFloat64, value)
		_node.Fat100 = value
	}
	if value, ok := fc.mutation.Carb100(); ok {
		_spec.SetField(food.FieldCarb100, field.TypeFloat64, value)
		_node.Carb100 = value
	}
	if value, ok := fc.mutation.Comment(); ok {
		_spec.SetField(food.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if nodes := fc.mutation.JournalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.JournalsTable,
			Columns: []string{food.JournalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(journal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Food.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FoodUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (fc *FoodCreate) OnConflict(opts ...sql.ConflictOption) *FoodUpsertOne {
	fc.conflict = opts
	return &FoodUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FoodCreate) OnConflictColumns(columns ...string) *FoodUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FoodUpsertOne{
		create: fc,
	}
}

type (
	// FoodUpsertOne is the builder for "upsert"-ing
	//  one Food node.
	FoodUpsertOne struct {
		create *FoodCreate
	}

	// FoodUpsert is the "OnConflict" setter.
	FoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *FoodUpsert) SetKey(v string) *FoodUpsert {
	u.Set(food.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *FoodUpsert) UpdateKey() *FoodUpsert {
	u.SetExcluded(food.FieldKey)
	return u
}

// SetName sets the "name" field.
func (u *FoodUpsert) SetName(v string) *FoodUpsert {
	u.Set(food.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FoodUpsert) UpdateName() *FoodUpsert {
	u.SetExcluded(food.FieldName)
	return u
}

// SetBrand sets the "brand" field.
func (u *FoodUpsert) SetBrand(v string) *FoodUpsert {
	u.Set(food.FieldBrand, v)
	return u
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *FoodUpsert) UpdateBrand() *FoodUpsert {
	u.SetExcluded(food.FieldBrand)
	return u
}

// ClearBrand clears the value of the "brand" field.
func (u *FoodUpsert) ClearBrand() *FoodUpsert {
	u.SetNull(food.FieldBrand)
	return u
}

// SetCal100 sets the "cal100" field.
func (u *FoodUpsert) SetCal100(v float64) *FoodUpsert {
	u.Set(food.FieldCal100, v)
	return u
}

// UpdateCal100 sets the "cal100" field to the value that was provided on create.
func (u *FoodUpsert) UpdateCal100() *FoodUpsert {
	u.SetExcluded(food.FieldCal100)
	return u
}

// AddCal100 adds v to the "cal100" field.
func (u *FoodUpsert) AddCal100(v float64) *FoodUpsert {
	u.Add(food.FieldCal100, v)
	return u
}

// SetProt100 sets the "prot100" field.
func (u *FoodUpsert) SetProt100(v float64) *FoodUpsert {
	u.Set(food.FieldProt100, v)
	return u
}

// UpdateProt100 sets the "prot100" field to the value that was provided on create.
func (u *FoodUpsert) UpdateProt100() *FoodUpsert {
	u.SetExcluded(food.FieldProt100)
	return u
}

// AddProt100 adds v to the "prot100" field.
func (u *FoodUpsert) AddProt100(v float64) *FoodUpsert {
	u.Add(food.FieldProt100, v)
	return u
}

// SetFat100 sets the "fat100" field.
func (u *FoodUpsert) SetFat100(v float64) *FoodUpsert {
	u.Set(food.FieldFat100, v)
	return u
}

// UpdateFat100 sets the "fat100" field to the value that was provided on create.
func (u *FoodUpsert) UpdateFat100() *FoodUpsert {
	u.SetExcluded(food.FieldFat100)
	return u
}

// AddFat100 adds v to the "fat100" field.
func (u *FoodUpsert) AddFat100(v float64) *FoodUpsert {
	u.Add(food.FieldFat100, v)
	return u
}

// SetCarb100 sets the "carb100" field.
func (u *FoodUpsert) SetCarb100(v float64) *FoodUpsert {
	u.Set(food.FieldCarb100, v)
	return u
}

// UpdateCarb100 sets the "carb100" field to the value that was provided on create.
func (u *FoodUpsert) UpdateCarb100() *FoodUpsert {
	u.SetExcluded(food.FieldCarb100)
	return u
}

// AddCarb100 adds v to the "carb100" field.
func (u *FoodUpsert) AddCarb100(v float64) *FoodUpsert {
	u.Add(food.FieldCarb100, v)
	return u
}

// SetComment sets the "comment" field.
func (u *FoodUpsert) SetComment(v string) *FoodUpsert {
	u.Set(food.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *FoodUpsert) UpdateComment() *FoodUpsert {
	u.SetExcluded(food.FieldComment)
	return u
}

// ClearComment clears the value of the "comment" field.
func (u *FoodUpsert) ClearComment() *FoodUpsert {
	u.SetNull(food.FieldComment)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FoodUpsertOne) UpdateNewValues() *FoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Food.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FoodUpsertOne) Ignore() *FoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FoodUpsertOne) DoNothing() *FoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FoodCreate.OnConflict
// documentation for more info.
func (u *FoodUpsertOne) Update(set func(*FoodUpsert)) *FoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *FoodUpsertOne) SetKey(v string) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateKey() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *FoodUpsertOne) SetName(v string) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateName() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateName()
	})
}

// SetBrand sets the "brand" field.
func (u *FoodUpsertOne) SetBrand(v string) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateBrand() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateBrand()
	})
}

// ClearBrand clears the value of the "brand" field.
func (u *FoodUpsertOne) ClearBrand() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.ClearBrand()
	})
}

// SetCal100 sets the "cal100" field.
func (u *FoodUpsertOne) SetCal100(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetCal100(v)
	})
}

// AddCal100 adds v to the "cal100" field.
func (u *FoodUpsertOne) AddCal100(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.AddCal100(v)
	})
}

// UpdateCal100 sets the "cal100" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateCal100() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateCal100()
	})
}

// SetProt100 sets the "prot100" field.
func (u *FoodUpsertOne) SetProt100(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetProt100(v)
	})
}

// AddProt100 adds v to the "prot100" field.
func (u *FoodUpsertOne) AddProt100(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.AddProt100(v)
	})
}

// UpdateProt100 sets the "prot100" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateProt100() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateProt100()
	})
}

// SetFat100 sets the "fat100" field.
func (u *FoodUpsertOne) SetFat100(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetFat100(v)
	})
}

// AddFat100 adds v to the "fat100" field.
func (u *FoodUpsertOne) AddFat100(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.AddFat100(v)
	})
}

// UpdateFat100 sets the "fat100" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateFat100() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateFat100()
	})
}

// SetCarb100 sets the "carb100" field.
func (u *FoodUpsertOne) SetCarb100(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetCarb100(v)
	})
}

// AddCarb100 adds v to the "carb100" field.
func (u *FoodUpsertOne) AddCarb100(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.AddCarb100(v)
	})
}

// UpdateCarb100 sets the "carb100" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateCarb100() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateCarb100()
	})
}

// SetComment sets the "comment" field.
func (u *FoodUpsertOne) SetComment(v string) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateComment() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *FoodUpsertOne) ClearComment() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.ClearComment()
	})
}

// Exec executes the query.
func (u *FoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FoodUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FoodUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FoodCreateBulk is the builder for creating many Food entities in bulk.
type FoodCreateBulk struct {
	config
	err      error
	builders []*FoodCreate
	conflict []sql.ConflictOption
}

// Save creates the Food entities in the database.
func (fcb *FoodCreateBulk) Save(ctx context.Context) ([]*Food, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Food, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FoodCreateBulk) SaveX(ctx context.Context) []*Food {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FoodCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FoodCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Food.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FoodUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (fcb *FoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *FoodUpsertBulk {
	fcb.conflict = opts
	return &FoodUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FoodCreateBulk) OnConflictColumns(columns ...string) *FoodUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FoodUpsertBulk{
		create: fcb,
	}
}

// FoodUpsertBulk is the builder for "upsert"-ing
// a bulk of Food nodes.
type FoodUpsertBulk struct {
	create *FoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FoodUpsertBulk) UpdateNewValues() *FoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FoodUpsertBulk) Ignore() *FoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FoodUpsertBulk) DoNothing() *FoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FoodCreateBulk.OnConflict
// documentation for more info.
func (u *FoodUpsertBulk) Update(set func(*FoodUpsert)) *FoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *FoodUpsertBulk) SetKey(v string) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateKey() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateKey()
	})
}

// SetName sets the "name" field.
func (u *FoodUpsertBulk) SetName(v string) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateName() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateName()
	})
}

// SetBrand sets the "brand" field.
func (u *FoodUpsertBulk) SetBrand(v string) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateBrand() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateBrand()
	})
}

// ClearBrand clears the value of the "brand" field.
func (u *FoodUpsertBulk) ClearBrand() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.ClearBrand()
	})
}

// SetCal100 sets the "cal100" field.
func (u *FoodUpsertBulk) SetCal100(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetCal100(v)
	})
}

// AddCal100 adds v to the "cal100" field.
func (u *FoodUpsertBulk) AddCal100(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.AddCal100(v)
	})
}

// UpdateCal100 sets the "cal100" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateCal100() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateCal100()
	})
}

// SetProt100 sets the "prot100" field.
func (u *FoodUpsertBulk) SetProt100(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetProt100(v)
	})
}

// AddProt100 adds v to the "prot100" field.
func (u *FoodUpsertBulk) AddProt100(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.AddProt100(v)
	})
}

// UpdateProt100 sets the "prot100" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateProt100() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateProt100()
	})
}

// SetFat100 sets the "fat100" field.
func (u *FoodUpsertBulk) SetFat100(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetFat100(v)
	})
}

// AddFat100 adds v to the "fat100" field.
func (u *FoodUpsertBulk) AddFat100(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.AddFat100(v)
	})
}

// UpdateFat100 sets the "fat100" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateFat100() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateFat100()
	})
}

// SetCarb100 sets the "carb100" field.
func (u *FoodUpsertBulk) SetCarb100(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetCarb100(v)
	})
}

// AddCarb100 adds v to the "carb100" field.
func (u *FoodUpsertBulk) AddCarb100(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.AddCarb100(v)
	})
}

// UpdateCarb100 sets the "carb100" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateCarb100() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateCarb100()
	})
}

// SetComment sets the "comment" field.
func (u *FoodUpsertBulk) SetComment(v string) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateComment() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *FoodUpsertBulk) ClearComment() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.ClearComment()
	})
}

// Exec executes the query.
func (u *FoodUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
