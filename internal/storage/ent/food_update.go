// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devldavydov/myfood/internal/storage/ent/food"
	"github.com/devldavydov/myfood/internal/storage/ent/journal"
	"github.com/devldavydov/myfood/internal/storage/ent/predicate"
)

// FoodUpdate is the builder for updating Food entities.
type FoodUpdate struct {
	config
	hooks     []Hook
	mutation  *FoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FoodUpdate builder.
func (fu *FoodUpdate) Where(ps ...predicate.Food) *FoodUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetKey sets the "key" field.
func (fu *FoodUpdate) SetKey(s string) *FoodUpdate {
	fu.mutation.SetKey(s)
	return fu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableKey(s *string) *FoodUpdate {
	if s != nil {
		fu.SetKey(*s)
	}
	return fu
}

// SetName sets the "name" field.
func (fu *FoodUpdate) SetName(s string) *FoodUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableName(s *string) *FoodUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetBrand sets the "brand" field.
func (fu *FoodUpdate) SetBrand(s string) *FoodUpdate {
	fu.mutation.SetBrand(s)
	return fu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableBrand(s *string) *FoodUpdate {
	if s != nil {
		fu.SetBrand(*s)
	}
	return fu
}

// ClearBrand clears the value of the "brand" field.
func (fu *FoodUpdate) ClearBrand() *FoodUpdate {
	fu.mutation.ClearBrand()
	return fu
}

// SetCal100 sets the "cal100" field.
func (fu *FoodUpdate) SetCal100(f float64) *FoodUpdate {
	fu.mutation.ResetCal100()
	fu.mutation.SetCal100(f)
	return fu
}

// SetNillableCal100 sets the "cal100" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableCal100(f *float64) *FoodUpdate {
	if f != nil {
		fu.SetCal100(*f)
	}
	return fu
}

// AddCal100 adds f to the "cal100" field.
func (fu *FoodUpdate) AddCal100(f float64) *FoodUpdate {
	fu.mutation.AddCal100(f)
	return fu
}

// SetProt100 sets the "prot100" field.
func (fu *FoodUpdate) SetProt100(f float64) *FoodUpdate {
	fu.mutation.ResetProt100()
	fu.mutation.SetProt100(f)
	return fu
}

// SetNillableProt100 sets the "prot100" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableProt100(f *float64) *FoodUpdate {
	if f != nil {
		fu.SetProt100(*f)
	}
	return fu
}

// AddProt100 adds f to the "prot100" field.
func (fu *FoodUpdate) AddProt100(f float64) *FoodUpdate {
	fu.mutation.AddProt100(f)
	return fu
}

// SetFat100 sets the "fat100" field.
func (fu *FoodUpdate) SetFat100(f float64) *FoodUpdate {
	fu.mutation.ResetFat100()
	fu.mutation.SetFat100(f)
	return fu
}

// SetNillableFat100 sets the "fat100" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableFat100(f *float64) *FoodUpdate {
	if f != nil {
		fu.SetFat100(*f)
	}
	return fu
}

// AddFat100 adds f to the "fat100" field.
func (fu *FoodUpdate) AddFat100(f float64) *FoodUpdate {
	fu.mutation.AddFat100(f)
	return fu
}

// SetCarb100 sets the "carb100" field.
func (fu *FoodUpdate) SetCarb100(f float64) *FoodUpdate {
	fu.mutation.ResetCarb100()
	fu.mutation.SetCarb100(f)
	return fu
}

// SetNillableCarb100 sets the "carb100" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableCarb100(f *float64) *FoodUpdate {
	if f != nil {
		fu.SetCarb100(*f)
	}
	return fu
}

// AddCarb100 adds f to the "carb100" field.
func (fu *FoodUpdate) AddCarb100(f float64) *FoodUpdate {
	fu.mutation.AddCarb100(f)
	return fu
}

// SetComment sets the "comment" field.
func (fu *FoodUpdate) SetComment(s string) *FoodUpdate {
	fu.mutation.SetComment(s)
	return fu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableComment(s *string) *FoodUpdate {
	if s != nil {
		fu.SetComment(*s)
	}
	return fu
}

// ClearComment clears the value of the "comment" field.
func (fu *FoodUpdate) ClearComment() *FoodUpdate {
	fu.mutation.ClearComment()
	return fu
}

// AddJournalIDs adds the "journals" edge to the Journal entity by IDs.
func (fu *FoodUpdate) AddJournalIDs(ids ...int) *FoodUpdate {
	fu.mutation.AddJournalIDs(ids...)
	return fu
}

// AddJournals adds the "journals" edges to the Journal entity.
func (fu *FoodUpdate) AddJournals(j ...*Journal) *FoodUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return fu.AddJournalIDs(ids...)
}

// Mutation returns the FoodMutation object of the builder.
func (fu *FoodUpdate) Mutation() *FoodMutation {
	return fu.mutation
}

// ClearJournals clears all "journals" edges to the Journal entity.
func (fu *FoodUpdate) ClearJournals() *FoodUpdate {
	fu.mutation.ClearJournals()
	return fu
}

// RemoveJournalIDs removes the "journals" edge to Journal entities by IDs.
func (fu *FoodUpdate) RemoveJournalIDs(ids ...int) *FoodUpdate {
	fu.mutation.RemoveJournalIDs(ids...)
	return fu
}

// RemoveJournals removes "journals" edges to Journal entities.
func (fu *FoodUpdate) RemoveJournals(j ...*Journal) *FoodUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return fu.RemoveJournalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FoodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FoodUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FoodUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FoodUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FoodUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := food.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Food.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FoodUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FoodUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(food.Table, food.Columns, sqlgraph.NewFieldSpec(food.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Key(); ok {
		_spec.SetField(food.FieldKey, field.TypeString, value)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(food.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Brand(); ok {
		_spec.SetField(food.FieldBrand, field.TypeString, value)
	}
	if fu.mutation.BrandCleared() {
		_spec.ClearField(food.FieldBrand, field.TypeString)
	}
	if value, ok := fu.mutation.Cal100(); ok {
		_spec.SetField(food.FieldCal100, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedCal100(); ok {
		_spec.AddField(food.FieldCal100, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.Prot100(); ok {
		_spec.SetField(food.FieldProt100, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedProt100(); ok {
		_spec.AddField(food.FieldProt100, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.Fat100(); ok {
		_spec.SetField(food.FieldFat100, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedFat100(); ok {
		_spec.AddField(food.FieldFat100, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.Carb100(); ok {
		_spec.SetField(food.FieldCarb100, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedCarb100(); ok {
		_spec.AddField(food.FieldCarb100, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.Comment(); ok {
		_spec.SetField(food.FieldComment, field.TypeString, value)
	}
	if fu.mutation.CommentCleared() {
		_spec.ClearField(food.FieldComment, field.TypeString)
	}
	if fu.mutation.JournalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.JournalsTable,
			Columns: []string{food.JournalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(journal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedJournalsIDs(); len(nodes) > 0 && !fu.mutation.JournalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.JournalsTable,
			Columns: []string{food.JournalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(journal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.JournalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.JournalsTable,
			Columns: []string{food.JournalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(journal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{food.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FoodUpdateOne is the builder for updating a single Food entity.
type FoodUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FoodMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetKey sets the "key" field.
func (fuo *FoodUpdateOne) SetKey(s string) *FoodUpdateOne {
	fuo.mutation.SetKey(s)
	return fuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableKey(s *string) *FoodUpdateOne {
	if s != nil {
		fuo.SetKey(*s)
	}
	return fuo
}

// SetName sets the "name" field.
func (fuo *FoodUpdateOne) SetName(s string) *FoodUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableName(s *string) *FoodUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetBrand sets the "brand" field.
func (fuo *FoodUpdateOne) SetBrand(s string) *FoodUpdateOne {
	fuo.mutation.SetBrand(s)
	return fuo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableBrand(s *string) *FoodUpdateOne {
	if s != nil {
		fuo.SetBrand(*s)
	}
	return fuo
}

// ClearBrand clears the value of the "brand" field.
func (fuo *FoodUpdateOne) ClearBrand() *FoodUpdateOne {
	fuo.mutation.ClearBrand()
	return fuo
}

// SetCal100 sets the "cal100" field.
func (fuo *FoodUpdateOne) SetCal100(f float64) *FoodUpdateOne {
	fuo.mutation.ResetCal100()
	fuo.mutation.SetCal100(f)
	return fuo
}

// SetNillableCal100 sets the "cal100" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableCal100(f *float64) *FoodUpdateOne {
	if f != nil {
		fuo.SetCal100(*f)
	}
	return fuo
}

// AddCal100 adds f to the "cal100" field.
func (fuo *FoodUpdateOne) AddCal100(f float64) *FoodUpdateOne {
	fuo.mutation.AddCal100(f)
	return fuo
}

// SetProt100 sets the "prot100" field.
func (fuo *FoodUpdateOne) SetProt100(f float64) *FoodUpdateOne {
	fuo.mutation.ResetProt100()
	fuo.mutation.SetProt100(f)
	return fuo
}

// SetNillableProt100 sets the "prot100" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableProt100(f *float64) *FoodUpdateOne {
	if f != nil {
		fuo.SetProt100(*f)
	}
	return fuo
}

// AddProt100 adds f to the "prot100" field.
func (fuo *FoodUpdateOne) AddProt100(f float64) *FoodUpdateOne {
	fuo.mutation.AddProt100(f)
	return fuo
}

// SetFat100 sets the "fat100" field.
func (fuo *FoodUpdateOne) SetFat100(f float64) *FoodUpdateOne {
	fuo.mutation.ResetFat100()
	fuo.mutation.SetFat100(f)
	return fuo
}

// SetNillableFat100 sets the "fat100" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableFat100(f *float64) *FoodUpdateOne {
	if f != nil {
		fuo.SetFat100(*f)
	}
	return fuo
}

// AddFat100 adds f to the "fat100" field.
func (fuo *FoodUpdateOne) AddFat100(f float64) *FoodUpdateOne {
	fuo.mutation.AddFat100(f)
	return fuo
}

// SetCarb100 sets the "carb100" field.
func (fuo *FoodUpdateOne) SetCarb100(f float64) *FoodUpdateOne {
	fuo.mutation.ResetCarb100()
	fuo.mutation.SetCarb100(f)
	return fuo
}

// SetNillableCarb100 sets the "carb100" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableCarb100(f *float64) *FoodUpdateOne {
	if f != nil {
		fuo.SetCarb100(*f)
	}
	return fuo
}

// AddCarb100 adds f to the "carb100" field.
func (fuo *FoodUpdateOne) AddCarb100(f float64) *FoodUpdateOne {
	fuo.mutation.AddCarb100(f)
	return fuo
}

// SetComment sets the "comment" field.
func (fuo *FoodUpdateOne) SetComment(s string) *FoodUpdateOne {
	fuo.mutation.SetComment(s)
	return fuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableComment(s *string) *FoodUpdateOne {
	if s != nil {
		fuo.SetComment(*s)
	}
	return fuo
}

// ClearComment clears the value of the "comment" field.
func (fuo *FoodUpdateOne) ClearComment() *FoodUpdateOne {
	fuo.mutation.ClearComment()
	return fuo
}

// AddJournalIDs adds the "journals" edge to the Journal entity by IDs.
func (fuo *FoodUpdateOne) AddJournalIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.AddJournalIDs(ids...)
	return fuo
}

// AddJournals adds the "journals" edges to the Journal entity.
func (fuo *FoodUpdateOne) AddJournals(j ...*Journal) *FoodUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return fuo.AddJournalIDs(ids...)
}

// Mutation returns the FoodMutation object of the builder.
func (fuo *FoodUpdateOne) Mutation() *FoodMutation {
	return fuo.mutation
}

// ClearJournals clears all "journals" edges to the Journal entity.
func (fuo *FoodUpdateOne) ClearJournals() *FoodUpdateOne {
	fuo.mutation.ClearJournals()
	return fuo
}

// RemoveJournalIDs removes the "journals" edge to Journal entities by IDs.
func (fuo *FoodUpdateOne) RemoveJournalIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.RemoveJournalIDs(ids...)
	return fuo
}

// RemoveJournals removes "journals" edges to Journal entities.
func (fuo *FoodUpdateOne) RemoveJournals(j ...*Journal) *FoodUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return fuo.RemoveJournalIDs(ids...)
}

// Where appends a list predicates to the FoodUpdate builder.
func (fuo *FoodUpdateOne) Where(ps ...predicate.Food) *FoodUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FoodUpdateOne) Select(field string, fields ...string) *FoodUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Food entity.
func (fuo *FoodUpdateOne) Save(ctx context.Context) (*Food, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FoodUpdateOne) SaveX(ctx context.Context) *Food {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FoodUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FoodUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FoodUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := food.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Food.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FoodUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FoodUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FoodUpdateOne) sqlSave(ctx context.Context) (_node *Food, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(food.Table, food.Columns, sqlgraph.NewFieldSpec(food.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Food.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, food.FieldID)
		for _, f := range fields {
			if !food.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != food.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Key(); ok {
		_spec.SetField(food.FieldKey, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(food.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Brand(); ok {
		_spec.SetField(food.FieldBrand, field.TypeString, value)
	}
	if fuo.mutation.BrandCleared() {
		_spec.ClearField(food.FieldBrand, field.TypeString)
	}
	if value, ok := fuo.mutation.Cal100(); ok {
		_spec.SetField(food.FieldCal100, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedCal100(); ok {
		_spec.AddField(food.FieldCal100, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.Prot100(); ok {
		_spec.SetField(food.FieldProt100, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedProt100(); ok {
		_spec.AddField(food.FieldProt100, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.Fat100(); ok {
		_spec.SetField(food.FieldFat100, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedFat100(); ok {
		_spec.AddField(food.FieldFat100, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.Carb100(); ok {
		_spec.SetField(food.FieldCarb100, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedCarb100(); ok {
		_spec.AddField(food.FieldCarb100, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.Comment(); ok {
		_spec.SetField(food.FieldComment, field.TypeString, value)
	}
	if fuo.mutation.CommentCleared() {
		_spec.ClearField(food.FieldComment, field.TypeString)
	}
	if fuo.mutation.JournalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.JournalsTable,
			Columns: []string{food.JournalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(journal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedJournalsIDs(); len(nodes) > 0 && !fuo.mutation.JournalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.JournalsTable,
			Columns: []string{food.JournalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(journal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.JournalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.JournalsTable,
			Columns: []string{food.JournalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(journal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Food{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{food.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
