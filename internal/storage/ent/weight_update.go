// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devldavydov/myfood/internal/storage/ent/predicate"
	"github.com/devldavydov/myfood/internal/storage/ent/weight"
)

// WeightUpdate is the builder for updating Weight entities.
type WeightUpdate struct {
	config
	hooks     []Hook
	mutation  *WeightMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WeightUpdate builder.
func (wu *WeightUpdate) Where(ps ...predicate.Weight) *WeightUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUserid sets the "userid" field.
func (wu *WeightUpdate) SetUserid(i int64) *WeightUpdate {
	wu.mutation.ResetUserid()
	wu.mutation.SetUserid(i)
	return wu
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (wu *WeightUpdate) SetNillableUserid(i *int64) *WeightUpdate {
	if i != nil {
		wu.SetUserid(*i)
	}
	return wu
}

// AddUserid adds i to the "userid" field.
func (wu *WeightUpdate) AddUserid(i int64) *WeightUpdate {
	wu.mutation.AddUserid(i)
	return wu
}

// SetTimestamp sets the "timestamp" field.
func (wu *WeightUpdate) SetTimestamp(t time.Time) *WeightUpdate {
	wu.mutation.SetTimestamp(t)
	return wu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (wu *WeightUpdate) SetNillableTimestamp(t *time.Time) *WeightUpdate {
	if t != nil {
		wu.SetTimestamp(*t)
	}
	return wu
}

// SetValue sets the "value" field.
func (wu *WeightUpdate) SetValue(f float64) *WeightUpdate {
	wu.mutation.ResetValue()
	wu.mutation.SetValue(f)
	return wu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (wu *WeightUpdate) SetNillableValue(f *float64) *WeightUpdate {
	if f != nil {
		wu.SetValue(*f)
	}
	return wu
}

// AddValue adds f to the "value" field.
func (wu *WeightUpdate) AddValue(f float64) *WeightUpdate {
	wu.mutation.AddValue(f)
	return wu
}

// Mutation returns the WeightMutation object of the builder.
func (wu *WeightUpdate) Mutation() *WeightMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WeightUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WeightUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WeightUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WeightUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WeightUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WeightUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WeightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(weight.Table, weight.Columns, sqlgraph.NewFieldSpec(weight.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Userid(); ok {
		_spec.SetField(weight.FieldUserid, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedUserid(); ok {
		_spec.AddField(weight.FieldUserid, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.Timestamp(); ok {
		_spec.SetField(weight.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Value(); ok {
		_spec.SetField(weight.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedValue(); ok {
		_spec.AddField(weight.FieldValue, field.TypeFloat64, value)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WeightUpdateOne is the builder for updating a single Weight entity.
type WeightUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WeightMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserid sets the "userid" field.
func (wuo *WeightUpdateOne) SetUserid(i int64) *WeightUpdateOne {
	wuo.mutation.ResetUserid()
	wuo.mutation.SetUserid(i)
	return wuo
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (wuo *WeightUpdateOne) SetNillableUserid(i *int64) *WeightUpdateOne {
	if i != nil {
		wuo.SetUserid(*i)
	}
	return wuo
}

// AddUserid adds i to the "userid" field.
func (wuo *WeightUpdateOne) AddUserid(i int64) *WeightUpdateOne {
	wuo.mutation.AddUserid(i)
	return wuo
}

// SetTimestamp sets the "timestamp" field.
func (wuo *WeightUpdateOne) SetTimestamp(t time.Time) *WeightUpdateOne {
	wuo.mutation.SetTimestamp(t)
	return wuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (wuo *WeightUpdateOne) SetNillableTimestamp(t *time.Time) *WeightUpdateOne {
	if t != nil {
		wuo.SetTimestamp(*t)
	}
	return wuo
}

// SetValue sets the "value" field.
func (wuo *WeightUpdateOne) SetValue(f float64) *WeightUpdateOne {
	wuo.mutation.ResetValue()
	wuo.mutation.SetValue(f)
	return wuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (wuo *WeightUpdateOne) SetNillableValue(f *float64) *WeightUpdateOne {
	if f != nil {
		wuo.SetValue(*f)
	}
	return wuo
}

// AddValue adds f to the "value" field.
func (wuo *WeightUpdateOne) AddValue(f float64) *WeightUpdateOne {
	wuo.mutation.AddValue(f)
	return wuo
}

// Mutation returns the WeightMutation object of the builder.
func (wuo *WeightUpdateOne) Mutation() *WeightMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WeightUpdate builder.
func (wuo *WeightUpdateOne) Where(ps ...predicate.Weight) *WeightUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WeightUpdateOne) Select(field string, fields ...string) *WeightUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Weight entity.
func (wuo *WeightUpdateOne) Save(ctx context.Context) (*Weight, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WeightUpdateOne) SaveX(ctx context.Context) *Weight {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WeightUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WeightUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WeightUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WeightUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WeightUpdateOne) sqlSave(ctx context.Context) (_node *Weight, err error) {
	_spec := sqlgraph.NewUpdateSpec(weight.Table, weight.Columns, sqlgraph.NewFieldSpec(weight.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Weight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weight.FieldID)
		for _, f := range fields {
			if !weight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Userid(); ok {
		_spec.SetField(weight.FieldUserid, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedUserid(); ok {
		_spec.AddField(weight.FieldUserid, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.Timestamp(); ok {
		_spec.SetField(weight.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Value(); ok {
		_spec.SetField(weight.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedValue(); ok {
		_spec.AddField(weight.FieldValue, field.TypeFloat64, value)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Weight{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
