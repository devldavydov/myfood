// Code generated by ent, DO NOT EDIT.

package usersettings

import (
	"entgo.io/ent/dialect/sql"
	"github.com/devldavydov/myfood/internal/storage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldID, id))
}

// Userid applies equality check predicate on the "userid" field. It's identical to UseridEQ.
func Userid(v int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldUserid, v))
}

// CalLimit applies equality check predicate on the "cal_limit" field. It's identical to CalLimitEQ.
func CalLimit(v float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCalLimit, v))
}

// UseridEQ applies the EQ predicate on the "userid" field.
func UseridEQ(v int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldUserid, v))
}

// UseridNEQ applies the NEQ predicate on the "userid" field.
func UseridNEQ(v int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldUserid, v))
}

// UseridIn applies the In predicate on the "userid" field.
func UseridIn(vs ...int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldUserid, vs...))
}

// UseridNotIn applies the NotIn predicate on the "userid" field.
func UseridNotIn(vs ...int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldUserid, vs...))
}

// UseridGT applies the GT predicate on the "userid" field.
func UseridGT(v int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldUserid, v))
}

// UseridGTE applies the GTE predicate on the "userid" field.
func UseridGTE(v int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldUserid, v))
}

// UseridLT applies the LT predicate on the "userid" field.
func UseridLT(v int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldUserid, v))
}

// UseridLTE applies the LTE predicate on the "userid" field.
func UseridLTE(v int64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldUserid, v))
}

// CalLimitEQ applies the EQ predicate on the "cal_limit" field.
func CalLimitEQ(v float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCalLimit, v))
}

// CalLimitNEQ applies the NEQ predicate on the "cal_limit" field.
func CalLimitNEQ(v float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldCalLimit, v))
}

// CalLimitIn applies the In predicate on the "cal_limit" field.
func CalLimitIn(vs ...float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldCalLimit, vs...))
}

// CalLimitNotIn applies the NotIn predicate on the "cal_limit" field.
func CalLimitNotIn(vs ...float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldCalLimit, vs...))
}

// CalLimitGT applies the GT predicate on the "cal_limit" field.
func CalLimitGT(v float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldCalLimit, v))
}

// CalLimitGTE applies the GTE predicate on the "cal_limit" field.
func CalLimitGTE(v float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldCalLimit, v))
}

// CalLimitLT applies the LT predicate on the "cal_limit" field.
func CalLimitLT(v float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldCalLimit, v))
}

// CalLimitLTE applies the LTE predicate on the "cal_limit" field.
func CalLimitLTE(v float64) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldCalLimit, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.NotPredicates(p))
}
