// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/devldavydov/myfood/internal/storage/ent/bundle"
)

// Bundle is the model entity for the Bundle schema.
type Bundle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Userid holds the value of the "userid" field.
	Userid int64 `json:"userid,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Data holds the value of the "data" field.
	Data         map[string]float64 `json:"data,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bundle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bundle.FieldData:
			values[i] = new([]byte)
		case bundle.FieldID, bundle.FieldUserid:
			values[i] = new(sql.NullInt64)
		case bundle.FieldKey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bundle fields.
func (b *Bundle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bundle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bundle.FieldUserid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userid", values[i])
			} else if value.Valid {
				b.Userid = value.Int64
			}
		case bundle.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				b.Key = value.String
			}
		case bundle.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bundle.
// This includes values selected through modifiers, order, etc.
func (b *Bundle) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Bundle.
// Note that you need to call Bundle.Unwrap() before calling this method if this Bundle
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bundle) Update() *BundleUpdateOne {
	return NewBundleClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bundle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bundle) Unwrap() *Bundle {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bundle is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bundle) String() string {
	var builder strings.Builder
	builder.WriteString("Bundle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("userid=")
	builder.WriteString(fmt.Sprintf("%v", b.Userid))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(b.Key)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", b.Data))
	builder.WriteByte(')')
	return builder.String()
}

// Bundles is a parsable slice of Bundle.
type Bundles []*Bundle
