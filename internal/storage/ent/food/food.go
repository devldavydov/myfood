// Code generated by ent, DO NOT EDIT.

package food

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the food type in the database.
	Label = "food"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldCal100 holds the string denoting the cal100 field in the database.
	FieldCal100 = "cal100"
	// FieldProt100 holds the string denoting the prot100 field in the database.
	FieldProt100 = "prot100"
	// FieldFat100 holds the string denoting the fat100 field in the database.
	FieldFat100 = "fat100"
	// FieldCarb100 holds the string denoting the carb100 field in the database.
	FieldCarb100 = "carb100"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// EdgeJournals holds the string denoting the journals edge name in mutations.
	EdgeJournals = "journals"
	// Table holds the table name of the food in the database.
	Table = "foods"
	// JournalsTable is the table that holds the journals relation/edge.
	JournalsTable = "journals"
	// JournalsInverseTable is the table name for the Journal entity.
	// It exists in this package in order to avoid circular dependency with the "journal" package.
	JournalsInverseTable = "journals"
	// JournalsColumn is the table column denoting the journals relation/edge.
	JournalsColumn = "food_journals"
)

// Columns holds all SQL columns for food fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldName,
	FieldBrand,
	FieldCal100,
	FieldProt100,
	FieldFat100,
	FieldCarb100,
	FieldComment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Food queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByCal100 orders the results by the cal100 field.
func ByCal100(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCal100, opts...).ToFunc()
}

// ByProt100 orders the results by the prot100 field.
func ByProt100(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProt100, opts...).ToFunc()
}

// ByFat100 orders the results by the fat100 field.
func ByFat100(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFat100, opts...).ToFunc()
}

// ByCarb100 orders the results by the carb100 field.
func ByCarb100(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarb100, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByJournalsCount orders the results by journals count.
func ByJournalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJournalsStep(), opts...)
	}
}

// ByJournals orders the results by journals terms.
func ByJournals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJournalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newJournalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JournalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JournalsTable, JournalsColumn),
	)
}
