// Code generated by ent, DO NOT EDIT.

package food

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/devldavydov/myfood/internal/storage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldKey, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldName, v))
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldBrand, v))
}

// Cal100 applies equality check predicate on the "cal100" field. It's identical to Cal100EQ.
func Cal100(v float64) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldCal100, v))
}

// Prot100 applies equality check predicate on the "prot100" field. It's identical to Prot100EQ.
func Prot100(v float64) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldProt100, v))
}

// Fat100 applies equality check predicate on the "fat100" field. It's identical to Fat100EQ.
func Fat100(v float64) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldFat100, v))
}

// Carb100 applies equality check predicate on the "carb100" field. It's identical to Carb100EQ.
func Carb100(v float64) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldCarb100, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldComment, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Food {
	return predicate.Food(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Food {
	return predicate.Food(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Food {
	return predicate.Food(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Food {
	return predicate.Food(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Food {
	return predicate.Food(sql.FieldContainsFold(FieldKey, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Food {
	return predicate.Food(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Food {
	return predicate.Food(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Food {
	return predicate.Food(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Food {
	return predicate.Food(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Food {
	return predicate.Food(sql.FieldContainsFold(FieldName, v))
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldBrand, v))
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldBrand, v))
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldBrand, vs...))
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldBrand, vs...))
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldBrand, v))
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldBrand, v))
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldBrand, v))
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldBrand, v))
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.Food {
	return predicate.Food(sql.FieldContains(FieldBrand, v))
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.Food {
	return predicate.Food(sql.FieldHasPrefix(FieldBrand, v))
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.Food {
	return predicate.Food(sql.FieldHasSuffix(FieldBrand, v))
}

// BrandIsNil applies the IsNil predicate on the "brand" field.
func BrandIsNil() predicate.Food {
	return predicate.Food(sql.FieldIsNull(FieldBrand))
}

// BrandNotNil applies the NotNil predicate on the "brand" field.
func BrandNotNil() predicate.Food {
	return predicate.Food(sql.FieldNotNull(FieldBrand))
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.Food {
	return predicate.Food(sql.FieldEqualFold(FieldBrand, v))
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.Food {
	return predicate.Food(sql.FieldContainsFold(FieldBrand, v))
}

// Cal100EQ applies the EQ predicate on the "cal100" field.
func Cal100EQ(v float64) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldCal100, v))
}

// Cal100NEQ applies the NEQ predicate on the "cal100" field.
func Cal100NEQ(v float64) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldCal100, v))
}

// Cal100In applies the In predicate on the "cal100" field.
func Cal100In(vs ...float64) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldCal100, vs...))
}

// Cal100NotIn applies the NotIn predicate on the "cal100" field.
func Cal100NotIn(vs ...float64) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldCal100, vs...))
}

// Cal100GT applies the GT predicate on the "cal100" field.
func Cal100GT(v float64) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldCal100, v))
}

// Cal100GTE applies the GTE predicate on the "cal100" field.
func Cal100GTE(v float64) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldCal100, v))
}

// Cal100LT applies the LT predicate on the "cal100" field.
func Cal100LT(v float64) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldCal100, v))
}

// Cal100LTE applies the LTE predicate on the "cal100" field.
func Cal100LTE(v float64) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldCal100, v))
}

// Prot100EQ applies the EQ predicate on the "prot100" field.
func Prot100EQ(v float64) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldProt100, v))
}

// Prot100NEQ applies the NEQ predicate on the "prot100" field.
func Prot100NEQ(v float64) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldProt100, v))
}

// Prot100In applies the In predicate on the "prot100" field.
func Prot100In(vs ...float64) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldProt100, vs...))
}

// Prot100NotIn applies the NotIn predicate on the "prot100" field.
func Prot100NotIn(vs ...float64) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldProt100, vs...))
}

// Prot100GT applies the GT predicate on the "prot100" field.
func Prot100GT(v float64) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldProt100, v))
}

// Prot100GTE applies the GTE predicate on the "prot100" field.
func Prot100GTE(v float64) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldProt100, v))
}

// Prot100LT applies the LT predicate on the "prot100" field.
func Prot100LT(v float64) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldProt100, v))
}

// Prot100LTE applies the LTE predicate on the "prot100" field.
func Prot100LTE(v float64) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldProt100, v))
}

// Fat100EQ applies the EQ predicate on the "fat100" field.
func Fat100EQ(v float64) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldFat100, v))
}

// Fat100NEQ applies the NEQ predicate on the "fat100" field.
func Fat100NEQ(v float64) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldFat100, v))
}

// Fat100In applies the In predicate on the "fat100" field.
func Fat100In(vs ...float64) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldFat100, vs...))
}

// Fat100NotIn applies the NotIn predicate on the "fat100" field.
func Fat100NotIn(vs ...float64) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldFat100, vs...))
}

// Fat100GT applies the GT predicate on the "fat100" field.
func Fat100GT(v float64) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldFat100, v))
}

// Fat100GTE applies the GTE predicate on the "fat100" field.
func Fat100GTE(v float64) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldFat100, v))
}

// Fat100LT applies the LT predicate on the "fat100" field.
func Fat100LT(v float64) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldFat100, v))
}

// Fat100LTE applies the LTE predicate on the "fat100" field.
func Fat100LTE(v float64) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldFat100, v))
}

// Carb100EQ applies the EQ predicate on the "carb100" field.
func Carb100EQ(v float64) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldCarb100, v))
}

// Carb100NEQ applies the NEQ predicate on the "carb100" field.
func Carb100NEQ(v float64) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldCarb100, v))
}

// Carb100In applies the In predicate on the "carb100" field.
func Carb100In(vs ...float64) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldCarb100, vs...))
}

// Carb100NotIn applies the NotIn predicate on the "carb100" field.
func Carb100NotIn(vs ...float64) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldCarb100, vs...))
}

// Carb100GT applies the GT predicate on the "carb100" field.
func Carb100GT(v float64) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldCarb100, v))
}

// Carb100GTE applies the GTE predicate on the "carb100" field.
func Carb100GTE(v float64) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldCarb100, v))
}

// Carb100LT applies the LT predicate on the "carb100" field.
func Carb100LT(v float64) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldCarb100, v))
}

// Carb100LTE applies the LTE predicate on the "carb100" field.
func Carb100LTE(v float64) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldCarb100, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Food {
	return predicate.Food(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Food {
	return predicate.Food(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Food {
	return predicate.Food(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Food {
	return predicate.Food(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Food {
	return predicate.Food(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Food {
	return predicate.Food(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Food {
	return predicate.Food(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Food {
	return predicate.Food(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Food {
	return predicate.Food(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Food {
	return predicate.Food(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Food {
	return predicate.Food(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Food {
	return predicate.Food(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Food {
	return predicate.Food(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Food {
	return predicate.Food(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Food {
	return predicate.Food(sql.FieldContainsFold(FieldComment, v))
}

// HasJournals applies the HasEdge predicate on the "journals" edge.
func HasJournals() predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JournalsTable, JournalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJournalsWith applies the HasEdge predicate on the "journals" edge with a given conditions (other predicates).
func HasJournalsWith(preds ...predicate.Journal) predicate.Food {
	return predicate.Food(func(s *sql.Selector) {
		step := newJournalsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Food) predicate.Food {
	return predicate.Food(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Food) predicate.Food {
	return predicate.Food(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Food) predicate.Food {
	return predicate.Food(sql.NotPredicates(p))
}
