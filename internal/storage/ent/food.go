// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/devldavydov/myfood/internal/storage/ent/food"
)

// Food is the model entity for the Food schema.
type Food struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// Cal100 holds the value of the "cal100" field.
	Cal100 float64 `json:"cal100,omitempty"`
	// Prot100 holds the value of the "prot100" field.
	Prot100 float64 `json:"prot100,omitempty"`
	// Fat100 holds the value of the "fat100" field.
	Fat100 float64 `json:"fat100,omitempty"`
	// Carb100 holds the value of the "carb100" field.
	Carb100 float64 `json:"carb100,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FoodQuery when eager-loading is set.
	Edges        FoodEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FoodEdges holds the relations/edges for other nodes in the graph.
type FoodEdges struct {
	// Journals holds the value of the journals edge.
	Journals []*Journal `json:"journals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// JournalsOrErr returns the Journals value or an error if the edge
// was not loaded in eager-loading.
func (e FoodEdges) JournalsOrErr() ([]*Journal, error) {
	if e.loadedTypes[0] {
		return e.Journals, nil
	}
	return nil, &NotLoadedError{edge: "journals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Food) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case food.FieldCal100, food.FieldProt100, food.FieldFat100, food.FieldCarb100:
			values[i] = new(sql.NullFloat64)
		case food.FieldID:
			values[i] = new(sql.NullInt64)
		case food.FieldKey, food.FieldName, food.FieldBrand, food.FieldComment:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Food fields.
func (f *Food) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case food.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case food.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				f.Key = value.String
			}
		case food.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case food.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				f.Brand = value.String
			}
		case food.FieldCal100:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cal100", values[i])
			} else if value.Valid {
				f.Cal100 = value.Float64
			}
		case food.FieldProt100:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field prot100", values[i])
			} else if value.Valid {
				f.Prot100 = value.Float64
			}
		case food.FieldFat100:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fat100", values[i])
			} else if value.Valid {
				f.Fat100 = value.Float64
			}
		case food.FieldCarb100:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field carb100", values[i])
			} else if value.Valid {
				f.Carb100 = value.Float64
			}
		case food.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				f.Comment = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Food.
// This includes values selected through modifiers, order, etc.
func (f *Food) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryJournals queries the "journals" edge of the Food entity.
func (f *Food) QueryJournals() *JournalQuery {
	return NewFoodClient(f.config).QueryJournals(f)
}

// Update returns a builder for updating this Food.
// Note that you need to call Food.Unwrap() before calling this method if this Food
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Food) Update() *FoodUpdateOne {
	return NewFoodClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Food entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Food) Unwrap() *Food {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Food is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Food) String() string {
	var builder strings.Builder
	builder.WriteString("Food(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("key=")
	builder.WriteString(f.Key)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(f.Brand)
	builder.WriteString(", ")
	builder.WriteString("cal100=")
	builder.WriteString(fmt.Sprintf("%v", f.Cal100))
	builder.WriteString(", ")
	builder.WriteString("prot100=")
	builder.WriteString(fmt.Sprintf("%v", f.Prot100))
	builder.WriteString(", ")
	builder.WriteString("fat100=")
	builder.WriteString(fmt.Sprintf("%v", f.Fat100))
	builder.WriteString(", ")
	builder.WriteString("carb100=")
	builder.WriteString(fmt.Sprintf("%v", f.Carb100))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(f.Comment)
	builder.WriteByte(')')
	return builder.String()
}

// Foods is a parsable slice of Food.
type Foods []*Food
