// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/devldavydov/myfood/internal/storage/ent/food"
	"github.com/devldavydov/myfood/internal/storage/ent/journal"
	"github.com/devldavydov/myfood/internal/storage/ent/predicate"
)

// JournalQuery is the builder for querying Journal entities.
type JournalQuery struct {
	config
	ctx        *QueryContext
	order      []journal.OrderOption
	inters     []Interceptor
	predicates []predicate.Journal
	withFood   *FoodQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JournalQuery builder.
func (jq *JournalQuery) Where(ps ...predicate.Journal) *JournalQuery {
	jq.predicates = append(jq.predicates, ps...)
	return jq
}

// Limit the number of records to be returned by this query.
func (jq *JournalQuery) Limit(limit int) *JournalQuery {
	jq.ctx.Limit = &limit
	return jq
}

// Offset to start from.
func (jq *JournalQuery) Offset(offset int) *JournalQuery {
	jq.ctx.Offset = &offset
	return jq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jq *JournalQuery) Unique(unique bool) *JournalQuery {
	jq.ctx.Unique = &unique
	return jq
}

// Order specifies how the records should be ordered.
func (jq *JournalQuery) Order(o ...journal.OrderOption) *JournalQuery {
	jq.order = append(jq.order, o...)
	return jq
}

// QueryFood chains the current query on the "food" edge.
func (jq *JournalQuery) QueryFood() *FoodQuery {
	query := (&FoodClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(journal.Table, journal.FieldID, selector),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, journal.FoodTable, journal.FoodColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Journal entity from the query.
// Returns a *NotFoundError when no Journal was found.
func (jq *JournalQuery) First(ctx context.Context) (*Journal, error) {
	nodes, err := jq.Limit(1).All(setContextOp(ctx, jq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{journal.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jq *JournalQuery) FirstX(ctx context.Context) *Journal {
	node, err := jq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Journal ID from the query.
// Returns a *NotFoundError when no Journal ID was found.
func (jq *JournalQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jq.Limit(1).IDs(setContextOp(ctx, jq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{journal.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jq *JournalQuery) FirstIDX(ctx context.Context) int {
	id, err := jq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Journal entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Journal entity is found.
// Returns a *NotFoundError when no Journal entities are found.
func (jq *JournalQuery) Only(ctx context.Context) (*Journal, error) {
	nodes, err := jq.Limit(2).All(setContextOp(ctx, jq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{journal.Label}
	default:
		return nil, &NotSingularError{journal.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jq *JournalQuery) OnlyX(ctx context.Context) *Journal {
	node, err := jq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Journal ID in the query.
// Returns a *NotSingularError when more than one Journal ID is found.
// Returns a *NotFoundError when no entities are found.
func (jq *JournalQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jq.Limit(2).IDs(setContextOp(ctx, jq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{journal.Label}
	default:
		err = &NotSingularError{journal.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jq *JournalQuery) OnlyIDX(ctx context.Context) int {
	id, err := jq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Journals.
func (jq *JournalQuery) All(ctx context.Context) ([]*Journal, error) {
	ctx = setContextOp(ctx, jq.ctx, "All")
	if err := jq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Journal, *JournalQuery]()
	return withInterceptors[[]*Journal](ctx, jq, qr, jq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jq *JournalQuery) AllX(ctx context.Context) []*Journal {
	nodes, err := jq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Journal IDs.
func (jq *JournalQuery) IDs(ctx context.Context) (ids []int, err error) {
	if jq.ctx.Unique == nil && jq.path != nil {
		jq.Unique(true)
	}
	ctx = setContextOp(ctx, jq.ctx, "IDs")
	if err = jq.Select(journal.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jq *JournalQuery) IDsX(ctx context.Context) []int {
	ids, err := jq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jq *JournalQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jq.ctx, "Count")
	if err := jq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jq, querierCount[*JournalQuery](), jq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jq *JournalQuery) CountX(ctx context.Context) int {
	count, err := jq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jq *JournalQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jq.ctx, "Exist")
	switch _, err := jq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jq *JournalQuery) ExistX(ctx context.Context) bool {
	exist, err := jq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JournalQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jq *JournalQuery) Clone() *JournalQuery {
	if jq == nil {
		return nil
	}
	return &JournalQuery{
		config:     jq.config,
		ctx:        jq.ctx.Clone(),
		order:      append([]journal.OrderOption{}, jq.order...),
		inters:     append([]Interceptor{}, jq.inters...),
		predicates: append([]predicate.Journal{}, jq.predicates...),
		withFood:   jq.withFood.Clone(),
		// clone intermediate query.
		sql:  jq.sql.Clone(),
		path: jq.path,
	}
}

// WithFood tells the query-builder to eager-load the nodes that are connected to
// the "food" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JournalQuery) WithFood(opts ...func(*FoodQuery)) *JournalQuery {
	query := (&FoodClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withFood = query
	return jq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Userid int64 `json:"userid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Journal.Query().
//		GroupBy(journal.FieldUserid).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jq *JournalQuery) GroupBy(field string, fields ...string) *JournalGroupBy {
	jq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JournalGroupBy{build: jq}
	grbuild.flds = &jq.ctx.Fields
	grbuild.label = journal.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Userid int64 `json:"userid,omitempty"`
//	}
//
//	client.Journal.Query().
//		Select(journal.FieldUserid).
//		Scan(ctx, &v)
func (jq *JournalQuery) Select(fields ...string) *JournalSelect {
	jq.ctx.Fields = append(jq.ctx.Fields, fields...)
	sbuild := &JournalSelect{JournalQuery: jq}
	sbuild.label = journal.Label
	sbuild.flds, sbuild.scan = &jq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JournalSelect configured with the given aggregations.
func (jq *JournalQuery) Aggregate(fns ...AggregateFunc) *JournalSelect {
	return jq.Select().Aggregate(fns...)
}

func (jq *JournalQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jq); err != nil {
				return err
			}
		}
	}
	for _, f := range jq.ctx.Fields {
		if !journal.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jq.path != nil {
		prev, err := jq.path(ctx)
		if err != nil {
			return err
		}
		jq.sql = prev
	}
	return nil
}

func (jq *JournalQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Journal, error) {
	var (
		nodes       = []*Journal{}
		withFKs     = jq.withFKs
		_spec       = jq.querySpec()
		loadedTypes = [1]bool{
			jq.withFood != nil,
		}
	)
	if jq.withFood != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, journal.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Journal).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Journal{config: jq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jq.modifiers) > 0 {
		_spec.Modifiers = jq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jq.withFood; query != nil {
		if err := jq.loadFood(ctx, query, nodes, nil,
			func(n *Journal, e *Food) { n.Edges.Food = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jq *JournalQuery) loadFood(ctx context.Context, query *FoodQuery, nodes []*Journal, init func(*Journal), assign func(*Journal, *Food)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Journal)
	for i := range nodes {
		if nodes[i].food_journals == nil {
			continue
		}
		fk := *nodes[i].food_journals
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(food.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "food_journals" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (jq *JournalQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jq.querySpec()
	if len(jq.modifiers) > 0 {
		_spec.Modifiers = jq.modifiers
	}
	_spec.Node.Columns = jq.ctx.Fields
	if len(jq.ctx.Fields) > 0 {
		_spec.Unique = jq.ctx.Unique != nil && *jq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jq.driver, _spec)
}

func (jq *JournalQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(journal.Table, journal.Columns, sqlgraph.NewFieldSpec(journal.FieldID, field.TypeInt))
	_spec.From = jq.sql
	if unique := jq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jq.path != nil {
		_spec.Unique = true
	}
	if fields := jq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, journal.FieldID)
		for i := range fields {
			if fields[i] != journal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jq *JournalQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jq.driver.Dialect())
	t1 := builder.Table(journal.Table)
	columns := jq.ctx.Fields
	if len(columns) == 0 {
		columns = journal.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jq.sql != nil {
		selector = jq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jq.ctx.Unique != nil && *jq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range jq.modifiers {
		m(selector)
	}
	for _, p := range jq.predicates {
		p(selector)
	}
	for _, p := range jq.order {
		p(selector)
	}
	if offset := jq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jq *JournalQuery) Modify(modifiers ...func(s *sql.Selector)) *JournalSelect {
	jq.modifiers = append(jq.modifiers, modifiers...)
	return jq.Select()
}

// JournalGroupBy is the group-by builder for Journal entities.
type JournalGroupBy struct {
	selector
	build *JournalQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jgb *JournalGroupBy) Aggregate(fns ...AggregateFunc) *JournalGroupBy {
	jgb.fns = append(jgb.fns, fns...)
	return jgb
}

// Scan applies the selector query and scans the result into the given value.
func (jgb *JournalGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jgb.build.ctx, "GroupBy")
	if err := jgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JournalQuery, *JournalGroupBy](ctx, jgb.build, jgb, jgb.build.inters, v)
}

func (jgb *JournalGroupBy) sqlScan(ctx context.Context, root *JournalQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jgb.fns))
	for _, fn := range jgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jgb.flds)+len(jgb.fns))
		for _, f := range *jgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JournalSelect is the builder for selecting fields of Journal entities.
type JournalSelect struct {
	*JournalQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (js *JournalSelect) Aggregate(fns ...AggregateFunc) *JournalSelect {
	js.fns = append(js.fns, fns...)
	return js
}

// Scan applies the selector query and scans the result into the given value.
func (js *JournalSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, js.ctx, "Select")
	if err := js.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JournalQuery, *JournalSelect](ctx, js.JournalQuery, js, js.inters, v)
}

func (js *JournalSelect) sqlScan(ctx context.Context, root *JournalQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(js.fns))
	for _, fn := range js.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*js.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := js.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (js *JournalSelect) Modify(modifiers ...func(s *sql.Selector)) *JournalSelect {
	js.modifiers = append(js.modifiers, modifiers...)
	return js
}
